#!/bin/bash -xv

SRC=${SRC:=''}
DST=${DST:=''}
SCAN_ALL=${SCAN_ALL:=1}

CL_DEPLOY_MTD=/usr/local/bin/cl-deploy.mtd
CL_DEPLOY_PLATFORM=/usr/local/bin/cl-deploy.platform

declare -a MKFS=''
MKFS[0xC]="mkfs.vfat"
MKFS[0x83]="mkfs.ext4 -F"

source_block_device() {

# Make sure that the source device does not have
# an extended partition
local extended=$(sfdisk -l ${SRC} | awk '($0~/Extended/)&&($0="yes")')
if [[ -n ${extended} ]]; then
cat << eom

    !!! Unsupported configuration !!!
    Source device ${SRC}
    contains an extended partition.
    Exiting ...

eom
exit 0
fi

cat << eom

    Clonning Block Device
    Started: ${SRC} ==> ${DST}

eom

# Clone partition table
sfdisk --dump ${SRC} | sfdisk ${DST}
# Get & Expand last partition
last_part=$(sfdisk -l ${SRC} | awk -v var=${SRC}${SPART} ' END { gsub(var,"",$1); print $1 }')
echo ",+" | sfdisk -N ${last_part} ${DST}

part_info=$(sfdisk -l ${SRC} | awk -v var=${SRC}${SPART} '($1~var)&&(gsub(var,"",$1))&&($0="part="$1";type=0x"$6";")' ORS=" ")

for P in ${part_info};do
    eval ${P}
    _MKFS=${MKFS[${type}]:-mkfs.ext2 -F}
    ${_MKFS} ${DST}${DPART}${part}
    mount ${DST}${DPART}${part} ${mdst}
    mount ${SRC}${SPART}${part} ${msrc}
    prompt="[ ${SRC}${SPART}${part} => ${DST}${DPART}${part} ]"
    tar -C ${msrc} -cf - . 2>/dev/null | pv -N "${prompt}"| tar -C ${mdst} -xf - 2>/dev/null
    umount ${msrc}
    umount ${mdst}
done

cat << eom

    Done: ${SRC} ==> ${DST}

eom

}

source_tar_ball() {
cat << eom

    Deploying tar-ball
    Started: ${SRC} ==> ${DST}

eom

    create_cl_layout

    tar_info=$(file ${SRC} | awk '(/bzip2|gzip/)&&($0=$2)')
    [[ ${tar_info} = bzip2 ]] && filter=j
    [[ ${tar_info} = gzip ]] && filter=z

    mount ${DST}${DPART}2 ${mdst}
    prompt="[ ${SRC} => ${DST}${DPART}2 ]"
    pv ${SRC} | tar -C ${mdst} -x${filter}f - 2>/dev/null

    if [[ -d ${mdst}/boot ]];then
        local boot_dir=$(mktemp -d)
        mount ${DST}${DPART}1 ${boot_dir}
        cp -a ${mdst}/boot/* ${boot_dir}
        umount ${boot_dir}
        rm -rf ${boot_dir}
    fi

    umount ${mdst}

cat << eom

    Done: ${SRC} ==> ${DST}

eom
}

source_directory() {
cat << eom

    Deploying directory
    Started: ${SRC} ==> ${DST}

eom

    create_cl_layout

    declare -a src_parts=(: /boot /)
    declare -a dst_parts='1 2'

    for P in $dst_parts; do
        # Source partition is not a directory, then skip it.
        [[ ! -d ${SRC}${SPART}${src_parts[P]} ]] && continue
        mount -B -o ro ${SRC}${SPART}${src_parts[P]} ${msrc}
        if [[ $? -eq 0 ]];then
            mount ${DST}${DPART}${P} ${mdst}
            prompt="[ ${SRC}${SPART}${src_parts[P]} => ${DST}${DPART}${P} ]"
            tar -C ${msrc} -cf - . 2>/dev/null | pv -N "${prompt}"| tar -C ${mdst} -xf - 2>/dev/null
            umount ${mdst}
            umount ${msrc}
        else
cat << eom

    Non-mountable source ${SRC}${src_parts[P]} device
    Skip it & Continue ...

eom

        fi
    done

cat << eom

    Done: ${SRC} ==> ${DST}

eom
}

create_cl_layout() {
    # Boot partition size im MB
    local _size=32
    # Start offset 1M
    local _start=1

    # Mega -> Block
    _size=$(($_size << 11))
    _start=$(($_start << 11))

sfdisk --force ${DST} << eosfdisk
${_start},${_size},0x83
,,0x83
eosfdisk

    mkfs.ext2 -F -L boot ${DST}${DPART}1
    mkfs.ext4 -F -L rootfs ${DST}${DPART}2

}

unmount_destination() {
    local _arg=$(awk -v var=${DST} '{ ($0~var)&&(P=$1" "P) } END { print P }' /proc/mounts)
    if [[ -n ${_arg} ]];then
        umount ${_arg} &>/dev/null
        [[ $? -eq 0 ]] && return

        local DIALOG="Destination device ${DST} unmount failed:"
        dialog --backtitle "${DIALOG}" --title " WARNING: Exiting " --msgbox "${DIALOG}" 10 80
        exit
    fi
}

target_block_device() {
    unmount_destination
    [[ -b ${SRC} ]] && source_block_device
    [[ -d ${SRC} ]] && source_directory
    [[ -f ${SRC} ]] && source_tar_ball
}

target_mtd_device () {
    if [[ -e ${CL_DEPLOY_MTD} ]];then
        source ${CL_DEPLOY_MTD}
	if [[ -z ${MTD_DEPLOY_STATUS} ]];then
		SUCCESS_EXIT=''
	fi
    else
        local DIALOG="MTD deployment method is not provided."
        dialog --backtitle "${DIALOG}" --title " WARNING " --msgbox "${DIALOG}\nExiting ..." 10 60
        SUCCESS_EXIT=''
    fi
}

success_exit() {
    # Issue a platfor specific script
    [[ -e ${CL_DEPLOY_PLATFORM} ]] && source ${CL_DEPLOY_PLATFORM}

    local DIALOG="Finished with success"
    local MESSAGE="Boot media has been deployed on ${DST}\n\nWould you like to reboot the device now?"
    dialog --backtitle "${DIALOG}" --yesno "${MESSAGE}" 10 80 && reboot
}

select_directory() {
	local DIALOG="Select a directory:"
	_SELECT=$(dialog --backtitle "${DIALOG}" --dselect / 15 80 --stdout)
}

select_tarball() {
	local DIALOG="Select a tarball:"
	while [ 1 ];do
	_SELECT=$(dialog --backtitle "${DIALOG}" --fselect / 15 80  --stdout)
	# Empty=Cancel, then exit
	[[ -z ${_SELECT} ]] && break;

	if [[ ! -f ${_SELECT} ]];then
		DIALOG="Invalid selection ${_SELECT} : try again ..."
	else
		eval $(file ${_SELECT} | awk '(/bzip|gzip/)&&($0="arc="$2)')
		[[ -n ${arc} ]] && break;
		DIALOG="Invalid file format ${_SELECT}: try again ..."
	fi
	done
}

get_all_device() {
    local ignored=${1:--na-}
    local min_size_inb=${2:-2048}
    local all_devs=$(ls /sys/class/block/*/size | awk -v var=${ignored} -F"/" '(($0!~var)&&(/mmc|sd/)&&($0=$5))')
    unset avail_devs; declare -a avail_devs
    local i=0
    for dev in ${all_devs};do
	block_dev=$(udevadm info -n "/dev/"${dev} | awk -F "block" '(/DEVPATH/)&&(split($2,a,"/"))&&($0=a[2])')
	[[ ${avail_devs[@]} =~ ${block_dev} ]] && continue
	avail_devs[${i}]="/dev/${block_dev} "
	((i++))
    done

    if [[ ${MTD} = 'YES' ]];then
        # Figure out whether an mtd device is available
        # res=$(awk '(/rootfs|linux/)&&(gsub(/:/,""))&&(gsub(/\"/,"")&&($0=$NF"="$1))' ORS="; " /proc/mtd)
        res=$(awk '(/rootfs|linux|kernel|dtb/)&&(gsub(/:/,""))&&(gsub(/\"/,"")&&($0=$NF"="$1))' ORS="; " /proc/mtd)
        eval ${res}
        [[ -n ${rootfs} && -n ${linux} ]] && avail_devs[${rootfs}]="/dev/${rootfs} "
        [[ -n ${rootfs} && -n ${kernel} && -n {dtb} ]] && avail_devs[${rootfs}]="/dev/${rootfs} "
    fi

    if [[ ${#avail_devs[@]} -ne 0 ]];then
        local rlist=''
        local ddev=''
        for adev in ${avail_devs[@]};do
            ddev=$(udevadm info -p /sys/class/block/$(basename ${adev}) | awk '(/ disk\/by-id/)&&(split($2,a,"/")&&($0=a[3]))')
            ddev=${ddev:-${adev}}
            rlist+=${adev}" "${ddev}" OFF "
        done
        [[ ! -z "${3}" ]] && rlist+=${3}" "${3}" OFF "
        [[ ! -z "${4}" ]] && rlist+=${4}" "${4}" OFF "
        _SELECT=$(dialog --backtitle "Select a ${type} device" --radiolist "Available Devices:" 12 80 12 ${rlist} --stdout)
    fi
}

# If source is provided by the caller,
# then use it. Skip this select dialog.
if [[ -z ${SRC} ]];then
    _SELECT=''
    ignore=$([[ -n ${DST} ]] && basename ${DST} || echo -n "-")
    type="source"; MTD='NO'; get_all_device ${ignore} 0 directory tarball
    SRC=${_SELECT}
    [[ ${SRC} = 'directory' || ${SRC} = 'tarball' ]] && select_${SRC}
    SRC=${_SELECT}
fi

# For some reason a source still not selected
# Warning & Exit
if [[ -z ${SRC} ]];then
    DIALOG='No source device'
    dialog --backtitle "${DIALOG}" --title " WARNING " --msgbox "${DIALOG}\nPess any key for exit." 10 80
    exit 2
fi

# If destination is provided by the caller,
# then use it. Skip this select dialog.
if [[ -z ${DST} ]];then
    _SELECT=''
    ignore=$([[ -b ${SRC} ]] && basename ${SRC} || echo -n "-")
    [[ -e ${CL_DEPLOY_MTD} ]] && MTD='YES' || MTD='NO'
    type="destination"; get_all_device ${ignore}
    DST=${_SELECT}
fi

# For some reason a destination still not selected
# Warning & Exit
if [[ -z ${DST} ]];then
    DIALOG='No destination device'
    dialog --backtitle "${DIALOG}" --title " WARNING " --msgbox "${DIALOG}\nPess any key for exit." 10 80
    exit 2
fi

[[ ${DST} =~ "mmc" || ${DST} =~ "loop" ]] && DPART='p' || DPART=''
[[ ${SRC} =~ "mmc" || ${SRC} =~ "loop" ]] && SPART='p' || SPART=''

msrc=/tmp/src
mdst=/tmp/dst

mkdir -p ${msrc} ${mdst}

SUCCESS_EXIT=success_exit

[ -f /etc/init.d/udev ] && /etc/init.d/udev stop

DIALOG="Start Deployment"
MESSAGE="Src: ${SRC} -> Dst: ${DST}\n\nAll data on ${DST} will be destroyed"
dialog --backtitle "${DIALOG}" --title " WARNING  " --yesno "${MESSAGE}" 10 80 || exit

[[ ${DST} =~ "mtd" ]] && target_mtd_device || target_block_device

${SUCCESS_EXIT}

exit
